STATIC_NOTIFICATION_LIST = "ladsdc@ice.dhs.gov"
unregister_url = "https://github.ice.dhs.gov/HQ-L/unregister.RHEL8.git"
unregister_branch = "main"
unregister_playbook = "sdo_unregister.yaml"
// Credentials needed for CloudBees Attach/Detach functionality
VAULT_MANAGED_APP_ROLE = 'managed_vault_approle'
CB_SECRET_PATH = 'secret/managed/cloudbees/shared'

// CloudBees Controller to attach the Build Node to
CTLR_NAME = 'aws'

// Name and Label of the Build Node
NODE_NAME = "sdo-jenkins-${KERNEL_MAJOR_VERSION}-${build_number}"
//'LINUX' or 'WINDOWS' -- This determines the configuration file format
NODE_OS = "LINUX"
// Optional values, these are for information purposes in the Build Agent Configuration Page
NODE_AWS_ACCT = "aws-nonprofit"
NODE_IAM_PROFILE = "arn:aws-us-gov:iam::1627637373219:instance-profile/IADSDC"

// Shared Library Debugging Level
LOG_LEVEL = "TRACE"
MAX_EXECUTORS = "12"

stages {
    stage('Find Kubectl1') {
        steps {
            script {
                def nexusQuery = "${nexusUrl}/service/rest/v1/search?repository=${aws_efs_repository}/name/${aws_efs_path}/${k8s_version}.*"
                
                def kubectl1_response = sh(
                    scripts: "curl -s -X GET '${nexusQuery}/kubectl1'",
                    returnStdout: true
                )
                
                def kubectl1Json = readJSON text: kubectl1_response
                (latestKubectl, kubectl1_download_url) = parseNexusSearchResponse(kubectl1Json, aws_efs_path.length() + 1)
                echo "Latest Kubectl: ${latestKubectl}, downloadUrl: ${kubectl1_download_url}"
            }
        }
    }
    
    stage('Checkov') {
        steps {
            ansiColor('xterm') {
                script {
                    sh "docker pull bridgecrew/checkov"
                    sh "docker run --rm -t -v ${WORKSPACE}:/tf bridgecrew/checkov --directory /tf -o cli || true"
                }
            }
        }
    }

    stage('Provision') {
        steps {
            withCredentials([[$class: 'VaultTokenCredentialBinding', credentialsId: vaultCredentialsId, vaultAddr: vaultUrl]]) {
                withVault(configuration: vaultConfig, vaultSecrets: secrets) {
                    script {
                        def varMap = [:]
                        varMap["build_number"] = build_number
                        varMap["number"] = image_num
                        
                        tfvarsfile = "${BUILD_ENV}.tfvars"
                        
                        terraform.provisionEnvironmentGenerateBackend("ec2", "Terraform 1.7", workspace, varMap, tfvarsfile, aws_certificate)
                        
                        IP_ADDR = terraform.getOutput("ec2", "ip | sed s/\\\"/g")
                        HOSTNAME = terraform.getOutput("ec2", "hostname")
                        INSTANCE_ID = terraform.getOutput("ec2", "id")
                        INSTANCE_ENVIRONMENT_TAG = "${BUILD_ENV}"
                        INSTANCE_IC_PLATFORM_TAG = terraform.getOutput("ec2", "IC_PLATFORM_tag")
                        BASE_AMI = terraform.getOutput("ec2", "base_ami")
                        
                        // create an artifact with the IP address for convenience
                        def ipfilename = "${IP_ADDR}.txt"
                        writeFile file: ipfilename, text: "ip_addr: ${IP_ADDR}\nhostname: ${HOSTNAME}\ninstance_id: ${INSTANCE_ID}\n"
                        archiveArtifacts artifacts: ipfilename, onlyIfSuccessful: true
                    }
                }
            }
        }
    }
    
    stage('Deploy') {
        steps {
            withCredentials([[$class: 'VaultTokenCredentialBinding', credentialsId: vaultCredentialsId, vaultAddr: vaultUrl]]) {
                withVault(configuration: vaultConfig, vaultSecrets: secrets) {
                    script {
                        def varMap = [:]
                        varMap["nessus_access_key"] = nessus_access_key
                        varMap["nessus_secret_key"] = nessus_secret_key
                        varMap["zs_account"] = zs_account
                        varMap["bind_password"] = bind_password
                        varMap["ou_path"] = ou_path
                        varMap["ad_domain"] = 'inmet.ds2.dhs.gov'
                        varMap["group_list"] = group_list
                        varMap["subscription_org"] = "ICE"
                        varMap["activationkeyEnv"] = "non-prod"
                        varMap["activationkey"] = "non-prod-rhel8"
                        varMap["splunk_username"] = "admin"
                        varMap["vault_pass"] = vault_pass
                        varMap["nessus_scan_user"] = nessus_scan_user
                        varMap["nessus_scan_password"] = nessus_scan_password
                        varMap["kubectl1_download_url"] = kubectl1_download_url
                        
                        def pemJSON = utilities.getPemJson(aws_certificate, "aws_certificate", "pem.json")
                        
                        sh "ansible-galaxy collection install ansible.posix community.general"
                        tower.localDeploy(gitToken, aws_certificate, playbook, varMap, "${pemJSON}", IP_ADDR, INSTANCE_ENVIRONMENT_TAG)
                        sh "rm ${pemJSON}"
                        archiveArtifacts artifacts: "**/pem.json", allowEmptyArchive: true
                    }
                }
            }
        }
    }

    stage('Attach Build Node') {
        when {
            expression { IS_PATH }
        }
        steps {
            withCredentials([[$class: 'VaultTokenCredentialBinding', credentialsId: vaultCredentialsId, vaultAddr: vaultUrl]]) {
                withVault(configuration: vaultConfig, vaultSecrets: secrets) {
                    script {
                        sh "[[ -f jenkins-cli.jar ]] || cp /usr/local/bin/jenkins-cli.jar . || true"
                        cloudbeesUtils.attachNode(env.NODE_NAME, env.CTLR_NAME, HOSTNAME + '.inmet.ds2.dhs.gov', IP_ADDR, env.NODE_AWS_ACCT, env.NODE_IAM_PROFILE, env.NODE_OS, "${env.NODE_NAME} sdo-jenkins-8 sdo-jenkins sdo-rhel8")
                    }
                }
            }
        }
    }
    
    stage('After Attach Actions') {
        parallel {
            stage('Nessus') {
                when {
                    expression { IS_MAIN }
                }
                steps {
                    withCredentials([[$class: 'VaultTokenCredentialBinding', credentialsId: vaultCredentialsId, vaultAddr: vaultUrl]]) {
                        withVault(configuration: vaultConfig, vaultSecrets: secrets) {
                            script {
                                scanresultid = nessus.performScan(nessus_access_key, nessus_secret_key, NESSUS_SCAN, TENABLE_URL, IP_ADDR)
                                git_repo_name = env.GIT_URL.replaceFirst("/.+/([^/]+)\\.git", '$1').replaceAll("/", "-")
                                
                                if (env.BRANCH_NAME == 'master' || env.BRANCH_NAME == 'main') {
                                    reportName = "${git_repo_name}-${env.BUILD_NUMBER}"
                                } else {
                                    branch = env.BRANCH_NAME.replaceAll("/", "-")
                                    reportName = "${git_repo_name}-${branch}-${env.BUILD_NUMBER}"
                                }
                                
                                liteReportName = "${reportName}-lite"
                            }
                        }
                    }
                }
            }
        }
    }

    stage('Create Full Nessus Report PDF') {
        when {
            expression { IS_MAIN }
        }
        steps {
            withCredentials([[$class: 'VaultTokenCredentialBinding', credentialsId: vaultCredentialsId, vaultAddr: vaultUrl]]) {
                withVault(configuration: vaultConfig, vaultSecrets: secrets) {
                    script {
                        fullreportresultid = nessus.generateReport(nessus_access_key, nessus_secret_key, "FULL", scanresultid, TENABLE_URL)
                        nessus.getReport(nessus_access_key, nessus_secret_key, fullreportresultid, reportName, TENABLE_URL)
                    }
                }
            }
        }
    }

    stage('Create Lite Nessus Report PDF') {
        when {
            expression { IS_MAIN }
        }
        steps {
            withCredentials([[$class: 'VaultTokenCredentialBinding', credentialsId: vaultCredentialsId, vaultAddr: vaultUrl]]) {
                withVault(configuration: vaultConfig, vaultSecrets: secrets) {
                    script {
                        litereportresultid = nessus.generateReport(nessus_access_key, nessus_secret_key, "LITE", scanresultid, TENABLE_URL)
                        nessus.getReport(nessus_access_key, nessus_secret_key, litereportresultid, liteReportName, TENABLE_URL)
                    }
                }
            }
        }
    }

    stage('Download Reports and Archive') {
        when {
            expression { IS_MAIN }
        }
        steps {
            script {
                //Archive Nessus Reports
                archiveArtifacts artifacts: "${reportName}.pdf,${liteReportName}.pdf"
            }
        }
    }

    stage('Decide to delete') {
        when {
            expression { IS_MAIN }
        }
        agent none
        steps {
            script {
                readyToDelete = input message: 'Should we continue to terraform destroy?',
                parameters: [choice(name: 'Delete', choices: 'no\nyes', description: 'Choose "yes" if you want to delete these images and snapshots')]
            }
        }
    }

    stage('Unregister with Ansible Tower') {
        when {
            anyOf {
                expression { params.DESTROY }
                expression { readyToDelete == 'yes' }
            }
        }
        steps {
            withCredentials([[$class: 'VaultTokenCredentialBinding', credentialsId: vaultCredentialsId, vaultAddr: vaultUrl]]) {
                withVault(configuration: vaultConfig, vaultSecrets: secrets) {
                    script {
                        detach(zs_account, bind_password, aws_certificate, gitToken, unregister_playbook, unregister_url, unregister_branch, IP_ADDR, INSTANCE_ENVIRONMENT_TAG, CTLR_NAME, NODE_NAME)
                    }
                }
            }
        }
    }

    stage('Destroy') {
        when {
            anyOf {
                expression { params.DESTROY }
                expression { readyToDelete == 'yes' }
            }
        }
        steps {
            ansiColor('xterm') {
                withCredentials([[$class: 'VaultTokenCredentialBinding', credentialsId: vaultCredentialsId, vaultAddr: vaultUrl]]) {
                    withVault(configuration: vaultConfig, vaultSecrets: secrets) {
                        script {
                            destroy(image_num, build_number, branch, BUILD_ENV, aws_certificate)
                        }
                    }
                }
            }
        }
    }

    // Section 2: Node Management (mapped to diagram flow)
        stage('Node Management') {
            when {
                expression { IS_MAIN }
            }
            stages {
                stage('Build List of JenkinsAgents') {
                    steps {
                        script {
                            CCloudbeeUtils.vaultCredBindingWrapper(CTLR_NAME, { cbId, cbToken ->
                                echo "Building list of Jenkins Agents..."
                                def jenkinsAgentsList = []
                                
                                sh(
                                    returnStdout: true,
                                    script: "curl -s -o CloudbeesAgentsJSONOutput.txt -H '${cbId}:${cbToken}' 'https://cloudbees.ice.dhs.gov/ems/computer/api/json?tree=computer[displayName,description,assignedLabels[name]]&pretty=0'"
                                )
                                
                                def cloudbeesAgentsInfo = sh(returnStdout: true, script: "cat 'CloudbeesAgentsJSONOutput.txt' | jq -r '.computer[]' | select(.assignedLabels[].name == 'sdo-jenkins') | '\\(.displayName),\\(.description)'")
                                env.JENKINS_AGENTS_INFO = cloudbeesAgentsInfo
                            })
                        }
                    }
                }

                stage('Check Node Count') {
                    steps {
                        script {
                            def agentCount = env.JENKINS_AGENTS_INFO.split('\n').size()
                            echo "Found ${agentCount} Jenkins agents"
                            
                            if (agentCount <= 2) {
                                echo "Not enough nodes to process (${agentCount} nodes). Minimum required: 3"
                                currentBuild.result = 'ABORTED'
                                error("Insufficient nodes")
                            }
                        }
                    }
                }

                stage('Process Node List') {
                    steps {
                        script {
                            CCloudbeeUtils.vaultCredBindingWrapper(CTLR_NAME, { cbId, cbToken ->
                                // Create destroy list (excluding latest 2)
                                def currentNodeName = env.NODE_NAME
                                def jenkinsAgentsList = []
                                
                                env.JENKINS_AGENTS_INFO.split('\n').each { line ->
                                    def (jenkinsName, description) = line.split(',')
                                    def aws_instanceId = sh(
                                        returnStdout: true,
                                        script: "aws ec2 describe-instances --filters 'Name=tag:Name,Values=${jenkinsName}' --query 'Reservations[*].Instances[*].[InstanceId,LaunchTime]' --output text"
                                    ).trim()
                                    
                                    if (aws_instanceId) {
                                        jenkinsAgentsList << [
                                            name: jenkinsName,
                                            instanceId: aws_instanceId,
                                            isCurrentNode: (jenkinsName == currentNodeName)
                                        ]
                                    }
                                }

                                // Sort and create destroy list
                                jenkinsAgentsList.sort { a, b -> 
                                    def timeA = sh(script: "aws ec2 describe-instances --instance-ids ${a.instanceId} --query 'Reservations[].Instances[].LaunchTime' --output text", returnStdout: true).trim()
                                    def timeB = sh(script: "aws ec2 describe-instances --instance-ids ${b.instanceId} --query 'Reservations[].Instances[].LaunchTime' --output text", returnStdout: true).trim()
                                    timeB <=> timeA
                                }
                                
                                def toDestroyList = jenkinsAgentsList[2..-1]

                                // Ensure current node is at end
                                def currentNodeIndex = toDestroyList.findIndexOf { it.isCurrentNode }
                                if (currentNodeIndex != -1) {
                                    def currentNode = toDestroyList.remove(currentNodeIndex)
                                    toDestroyList << currentNode
                                }

                                // Process nodes
                                while (toDestroyList) {
                                    def agent = toDestroyList.first()
                                    
                                    if (agent.isCurrentNode) {
                                        def newestNode = jenkinsAgentsList[0].name
                                        echo "Attempting to transfer job to newest agent: ${newestNode}"
                                        
                                        def success = sh(
                                            script: """
                                                jenkins-cli -s http://${newestNode}:8080 build ${env.JOB_NAME} -p TRANSFER_FROM=${currentNodeName} || exit 1
                                                sleep 30
                                                if curl -s http://${newestNode}:8080/job/${env.JOB_NAME}/lastBuild/api/json | grep '"building":true'; then
                                                    exit 0
                                                else
                                                    exit 1
                                                fi
                                            """,
                                            returnStatus: true
                                        ) == 0
                                        
                                        if (!success) {
                                            error "Failed to transfer job to new agent, aborting cleanup"
                                        }
                                        echo "Job successfully transferred, current agent will be detached by new instance"
                                        break
                                    } else {
                                        echo "Detaching agent: ${agent.name}"
                                        jenkinsAgents.doDetach(agent.name, CTLR_NAME, false)
                                        toDestroyList.remove(0)
                                    }
                                }
                            })
                        }
                    }
                }
            }
        }
    }

post {
    success {
        script {
            status = "SUCCESS"
        }
    }
    unstable {
        script {
            status = "UNSTABLE"
        }
    }
    aborted {
        script {
            status = "ABORTED"
        }
    }
    failure {
        ansiColor('xterm') {
            withCredentials([[$class: 'VaultTokenCredentialBinding', credentialsId: vaultCredentialsId, vaultAddr: vaultUrl]]) {
                withVault(configuration: vaultConfig, vaultSecrets: secrets) {
                    script {
                        detach(zs_account, bind_password, aws_certificate, gitToken, unregister_playbook, unregister_url, unregister_branch, IP_ADDR, BUILD_ENV, CTLR_NAME, NODE_NAME)
                        destroy(image_num, build_number, branch, BUILD_ENV, aws_certificate)
                        status = "FAILED"
                    }
                }
            }
        }
    }
    changed {
        echo 'Things were different before...'
    }
    always {
        script {
            // Put any code you want here.
            echo 'fin'
        }
    }
}

def branch = env.BRANCH_NAME.replaceAll("/", "-")
def IP_ADDR = ""
def INSTANCE_ID = ""
def instanceName = now.format(DateTimeFormatter.ofPattern("yyyy.MM.dd")) + " " + env.BUILD_NUMBER
def currentBuild.displayName = instanceName
def IS_MAIN = (env.BRANCH_NAME == "master" || env.BRANCH_NAME == "main" || env.BRANCH_NAME.startsWith("PR-"))
def IS_PR = env.BRANCH_NAME.startsWith("PR-")
// Always use a unique ID, even on main
def build_number = env.BUILD_NUMBER.padLeft(3, '0')
def INSTANCE_IC_PLATFORM_TAG
def branch_name = (env.BRANCH_NAME.startsWith("PR-") ? env.CHANGE_BRANCH : env.BRANCH_NAME)
def reportName
def liteReportName

def branch = env.BRANCH_NAME.replaceAll("/", "-")
def nexusUrl = "https://nexus2.ice.dhs.gov"
def aws_efs_repository = "550_SEN_PARITY"
def aws_efs_path = "amazon-eks/"
def kubectl1_download_url
def k8s_version = "1.30"

def image_num = "180"

def RHEL_MAJOR_VERSION = "RHEL8"

def readyToDelete = "yes"
def defaultDestroy = true
if (!IS_MAIN) {
    defaultDestroy = false
}

pipeline {
    parameters {
        booleanParam(defaultValue: defaultDestroy,
            description: 'Do destroy after deploy?', name: 'DESTROY')
    }
    agent {
        node {
            label 'sdo-jenkins'
            // label 'aws-nonprofit'
        }
    }
    environment {
        DEBUG = true
        playbook = "sdo_jenkins.yml"
        BUILD_ENV = "dv"
        TENABLE_URL = "https://workproccell001.ice.dhs.gov/"
        GIT_REPO_NAME = env.GIT_URL.replaceFirst("/.+/([^/]+)\\.git", '$1').replaceAll("/", "-")
        NEXUS_SCAN = "NESSUS"
        STATIC_NOTIFICATION_LIST = "ladsdc@ice.dhs.gov"
    }
    
    def detach(zs_account, bind_password, aws_certificate, gitToken, unregister_playbook, unregister_url, unregister_branch, IP_ADDR, BUILD_ENV, CTLR_NAME, jenkinsName) {
        def varMap = [:]
        varMap["zs_account"] = zs_account
        varMap["bind_password"] = bind_password
        def pemJSON = utilities.getPemJson(aws_certificate, "aws_certificate", "pem.json")
        tower.localDeploy(gitToken, aws_certificate, unregister_playbook, varMap, pemJSON, unregister_url, unregister_branch, IP_ADDR, BUILD_ENV)
        sh "rm ${pemJSON}"
        echo "detaching ${jenkinsName}"
        jenkinsAgents.doDetach(jenkinsName, CTLR_NAME, false)
    }
    
    def destroy(image_num, build_number, branch, BUILD_ENV, aws_certificate) {
        echo "branch is ${env.BRANCH_NAME}"
        
        if (env.BRANCH_NAME == "master" || env.BRANCH_NAME == "main") {
            workspace = env.NODE_NAME
        } else {
            workspace = branch
        }
        
        def varMap = [:]
        varMap["build_number"] = build_number
        varMap["number"] = image_num
        tfvarsfile = "${BUILD_ENV}.tfvars"
        
        terraform.destroyEnvironment("ec2", "Terraform 1.7", workspace, varMap, tfvarsfile, aws_certificate, true)
    }
    
    /**
     * Parses the JSON response from a Nexus Repo Manager search request to return the most
     * recent version number and the download URL for that asset.
     *
     * @param jsonObj JSON response from Search API call, probably from a readJSON text; call in
     * the Jenkinsfile
     * @param index Position in the group field where the version number begins. E.g., for a group
     * folder named /amazon-eks/1.2.3, the index will be "/amazon-eks/".length() = 12
     * @return most recent version number and the URL to download that version
     * @see <a href="http://nexus2.ice.dhs.gov/service/rest/swagger.json">OpenAPI documentation for Nexus Repository Manager REST API</a>
     */
    @NonCPS
    static List parseNexusSearchResponse(net.sf.json.JSONObject jsonObj, int index) {
        def items = jsonObj.items
        def versions = []
        def downloadUrl = [:]
        
        for (item in items) {
            String v = item.group.substring(index)
            versions.add(v)
            downloadUrl[v] = item.assets[0].downloadUrl
        }
        def latest = maxVersion(versions)
        return [latest, downloadUrl[latest]]
    }

    /**
     * Given a list of version numbers, returns the most recent number.
     * 
     * Uses semantic versioning for comparison, so 1.2.1 > 1.2 and 1.2.10 > 1.2.2. However, not strict 
     * semVer so the version does not need to be strictly three parts.
     *
     * @param versions List of version numbers to be compared
     * @return the most recent version by semVer standards
     * @see <a href="https://semver.org/">Semantic Versioning 2.0.0</a>
     */
    @NonCPS
    static String maxVersion(List versions) {
        versions.max { a, b ->
            List verA = a.tokenize('.')
            List verB = b.tokenize('.')
            def commonIndices = Math.min(verA.size(), verB.size())
            for (int i = 0; i < commonIndices; ++i) {
                def numA = verA[i].toInteger()
                def numB = verB[i].toInteger()
                if (numA != numB) {
                    return numA <=> numB
                }
            }
            verA.size() <=> verB.size()
        }
    }