// Required imports and dependencies
@Library('jenkins-sharedlib') _
import com.cloudbees.jenkins.plugins.awscredentials.*
import com.cloudbees.plugins.credentials.*
import jenkins.model.Jenkins

// Required initialization variables
STATIC_NOTIFICATION_LIST = "ladsdc@ice.dhs.gov"
VAULT_MANAGED_APP_ROLE = 'managed_vault_approle'
CB_SECRET_PATH = 'secret/managed/cloudbees/shared'
CTLR_NAME = 'aws'

// Active Jenkins Agent Class Definition
class ActiveJenkinsAgent implements Serializable {
    def script
    String awsInstanceId
    String wsName
    String jenkinsName
    String ctlrName
    Date awsCreatedOnDate

    ActiveJenkinsAgent(script, awsInstanceId, wsName, jenkinsName, ctlrName) {
        this.script = script
        this.awsInstanceId = awsInstanceId
        this.wsName = wsName
        this.jenkinsName = jenkinsName
        this.ctlrName = ctlrName
        
        // Parse AWS launch time
        def launchTime = script.sh(
            returnStdout: true,
            script: "aws ec2 describe-instances --instance-ids ${awsInstanceId} --query 'Reservations[].Instances[].LaunchTime' --output text"
        ).trim()
        this.awsCreatedOnDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", launchTime)
    }
}

pipeline {
    agent {
        node {
            label 'sdo-jenkins'
        }
    }

    environment {
        CTLR_NAME = 'aws'
        DEBUG = true
        IS_MAIN = env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'master'
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    // Load required utilities
                    cloudBeesUtils = load 'cloudBeesUtils.groovy'
                    jenkinsAgents = load 'jenkinsAgents.groovy'
                }
            }
        }

        // The exact code from your paste.txt
        stage('Remove all but latest 2 Jenkins Agents') {
            when {
                expression { IS_MAIN }
            }
            steps {
                script {
                    // ### NEW ### - Get current node information
                    def currentNodeName = env.NODE_NAME
                    def currentNodeId = sh(
                        returnStdout: true,
                        script: "aws ec2 describe-instances --filters 'Name=tag:Name,Values=${currentNodeName}' --query 'Reservations[*].Instances[*].[InstanceId]' --output text"
                    ).trim()
                    
                    echo "Current node: ${currentNodeName} (${currentNodeId})"
                    
                    //CCSD wrapper for CloudBees functionality
                    CCloudbeeUtils.vaultCredBindingWrapper(CTLR_NAME, { cbId, cbToken ->
                        sh(
                            returnStdout: true,
                            script: "curl -s -o CloudbeesAgentsJSONOutput.txt -H '${cbId}:${cbToken}' 'https://cloudbees.ice.dhs.gov/ems/computer/api/json?tree=computer[displayName,description,assignedLabels[name]]&pretty=0'"
                        )
                        
                        def cloudbeesAgentsInfo = sh(returnStdout: true, script: "cat 'CloudbeesAgentsJSONOutput.txt' | jq -r '.computer[]' | select(.assignedLabels[].name == 'sdo-jenkins') | '\\(.displayName),\\(.description)'")
                        def activeAgentsList = []
                        // ### NEW ### - Track current agent
                        def currentAgent = null
                        
                        echo 'Processing agents...'
                        agentArray.each { jenkinsAgentWSCName ->
                            String[] agentInfo = jenkinsAgentWSCName.split(",")
                            if (agentInfo.size() != 2) {
                                throw new Exception("agentInfo Must have size of 2")
                            }
                            def jenkinsName = agentInfo[0]
                            def wsName = agentInfo[1]
                            
                            if(wsName.matches(".*['\";].*")) {
                                echo "wsName has a questionable charactor, skipping"
                                return
                            }
                        
                            def aws_instanceId = sh(
                                returnStdout: true,
                                script: "aws ec2 describe-instances --filters 'Name=tag:Name,Values=${wsName}' --query 'Reservations[*].Instances[*].[InstanceId,LaunchTime]' --output text"
                            )
                            
                            if ("${aws_instanceId}" == "") {
                                jenkinsAgents.doDetach(jenkinsName, CTLR_NAME, false)
                            } else {
                                def activeAgent = new ActiveJenkinsAgent(this, aws_instanceId, wsName, jenkinsName, CTLR_NAME)
                                // ### NEW ### - Check if this is the current node
                                if (aws_instanceId.contains(currentNodeId)) {
                                    echo "Found current agent in list"
                                    currentAgent = activeAgent
                                }
                                activeAgentsList.add(activeAgent)
                            }
                        }
                        
                        // ### NEW ### - Sort agents by creation date
                        echo "Sorting agents by creation date..."
                        activeAgentsList.sort { a, b -> b.awsCreatedOnDate <=> a.awsCreatedOnDate }
                        
                        echo "Active Jenkins Agents: "
                        activeAgentsList.each { v -> println "${v.awsInstanceId}, ${v.awsCreatedOnDate}, ${v.wsName}" }
                        
                        if (env.BRANCH_NAME == 'main') {
                            // ### NEW ### - Special handling for current agent
                            echo "Main branch, handling agent cleanup..."
                            
                            // If current agent is in latest 2, proceed normally
                            if (activeAgentsList.indexOf(currentAgent) < 2) {
                                echo "Current agent is one of the latest 2, proceeding with normal cleanup"
                                jenkinsAgents.removeAllbutlatest(this, 2, activeAgentsList, false)
                            } else {
                                echo "Current agent is older, initiating special cleanup sequence"
                                // Get the newest agent
                                def newestAgent = activeAgentsList[0]
                                
                                // Attempt to transfer the job to the newest agent
                                echo "Attempting to transfer job to newest agent: ${newestAgent.wsName}"
                                
                                def success = sh(
                                    script: """
                                        jenkins-cli -s http://${newestAgent.wsName}:8080 build ${env.JOB_NAME} -p TRANSFER_FROM=${currentNodeName} || exit 1
                                        sleep 30  # Wait for job to start on new agent
                                        if curl -s http://${newestAgent.wsName}:8080/job/${env.JOB_NAME}/lastBuild/api/json | grep '"building":true'; then
                                            exit 0
                                        else
                                            exit 1
                                        fi
                                    """,
                                    returnStatus: true
                                ) == 0
                                
                                if (success) {
                                    echo "Job successfully transferred, cleaning up old agents except current"
                                    // Remove all but latest 2 and current
                                    def agentsToKeep = [activeAgentsList[0], activeAgentsList[1], currentAgent]
                                    activeAgentsList.each { agent ->
                                        if (!agentsToKeep.contains(agent)) {
                                            jenkinsAgents.doDetach(agent.jenkinsName, CTLR_NAME, false)
                                        }
                                    }
                                    echo "Cleanup complete, current agent will be removed by the new job instance"
                                } else {
                                    error "Failed to transfer job to new agent, aborting cleanup"
                                }
                            }
                        } else {
                            echo "Not main branch, dry-run for removeAllbutlatest"
                            jenkinsAgents.removeAllbutlatest(this, 2, activeAgentsList, true)
                        }
                    })
                }
            }
        }
    }

    post {
        failure {
            script {
                emailext(
                    subject: "Jenkins Agent Cleanup Failed - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                    body: "The Jenkins agent cleanup job failed. Please check the logs.",
                    to: STATIC_NOTIFICATION_LIST
                )
            }
        }
    }
}