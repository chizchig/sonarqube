// Required imports and dependencies
@Library('jenkins-sharedlib') _
import com.cloudbees.jenkins.plugins.awscredentials.*
import com.cloudbees.plugins.credentials.*
import jenkins.model.Jenkins

// Required initialization variables
STATIC_NOTIFICATION_LIST = "ladsdc@ice.dhs.gov"
VAULT_MANAGED_APP_ROLE = 'managed_vault_approle'
CB_SECRET_PATH = 'secret/managed/cloudbees/shared'

// Define the ActiveJenkinsAgent class needed for agent management
class ActiveJenkinsAgent implements Serializable {
    def script
    String awsInstanceId
    String wsName
    String jenkinsName
    String ctlrName
    Date awsCreatedOnDate

    ActiveJenkinsAgent(script, awsInstanceId, wsName, jenkinsName, ctlrName) {
        this.script = script
        this.awsInstanceId = awsInstanceId
        this.wsName = wsName
        this.jenkinsName = jenkinsName
        this.ctlrName = ctlrName
        
        // Parse the AWS launch time
        def launchTime = script.sh(
            returnStdout: true,
            script: "aws ec2 describe-instances --instance-ids ${awsInstanceId} --query 'Reservations[].Instances[].LaunchTime' --output text"
        ).trim()
        this.awsCreatedOnDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", launchTime)
    }
}

pipeline {
    agent {
        node {
            label 'sdo-jenkins'
        }
    }
    
    environment {
        CTLR_NAME = 'aws'
        DEBUG = true
        // AWS and Vault credentials will be needed
        AWS_CREDENTIALS = credentials('aws-credentials-id')
        VAULT_CREDENTIALS = credentials('vault-credentials-id')
        // CloudBees credentials
        CB_CREDENTIALS = credentials('cloudbees-credentials-id')
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    // Load required utilities
                    cloudBeesUtils = load 'cloudBeesUtils.groovy'
                    jenkinsAgents = load 'jenkinsAgents.groovy'
                }
            }
        }

        stage('Remove all but latest 2 Jenkins Agents') {
            steps {
                script {
                    withCredentials([
                        [$class: 'AWSCredentialsBinding', 
                         credentialsId: 'aws-credentials-id',
                         accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
                         secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'],
                        [$class: 'VaultTokenCredentialBinding',
                         credentialsId: 'vault-credentials-id',
                         vaultAddr: vaultUrl]
                    ]) {
                        withVault(configuration: vaultConfig, vaultSecrets: secrets) {
                            // Get current node information
                            def currentNodeName = env.NODE_NAME
                            def currentNodeId = sh(
                                returnStdout: true,
                                script: "aws ec2 describe-instances --filters 'Name=tag:Name,Values=${currentNodeName}' --query 'Reservations[*].Instances[*].[InstanceId]' --output text"
                            ).trim()
                            
                            echo "Current node: ${currentNodeName} (${currentNodeId})"
                            
                            // Get list of agents using CloudBees API
                            def cloudbeesAgentsInfo = cloudBeesUtils.getAgentsList(CTLR_NAME)
                            def activeAgentsList = []
                            def currentAgent = null
                            
                            // Process each agent
                            cloudbeesAgentsInfo.each { agentInfo ->
                                def aws_instanceId = jenkinsAgents.getAwsInstanceId(agentInfo.name)
                                
                                if (aws_instanceId) {
                                    def activeAgent = new ActiveJenkinsAgent(
                                        this, 
                                        aws_instanceId, 
                                        agentInfo.name,
                                        agentInfo.displayName,
                                        CTLR_NAME
                                    )
                                    if (aws_instanceId.contains(currentNodeId)) {
                                        currentAgent = activeAgent
                                    }
                                    activeAgentsList.add(activeAgent)
                                }
                            }
                            
                            // Sort agents by creation date
                            activeAgentsList.sort { a, b -> b.awsCreatedOnDate <=> a.awsCreatedOnDate }
                            
                            // Handle cleanup
                            if (activeAgentsList.indexOf(currentAgent) < 2) {
                                echo "Current agent is one of the latest 2, proceeding with normal cleanup"
                                removeOldAgents(activeAgentsList, 2)
                            } else {
                                echo "Current agent is older, initiating special cleanup sequence"
                                def newestAgent = activeAgentsList[0]
                                
                                // Transfer job to newest agent
                                def success = transferJob(newestAgent.wsName, currentNodeName)
                                
                                if (success) {
                                    echo "Job successfully transferred, cleaning up old agents except current"
                                    def agentsToKeep = [activeAgentsList[0], activeAgentsList[1], currentAgent]
                                    activeAgentsList.each { agent ->
                                        if (!agentsToKeep.contains(agent)) {
                                            jenkinsAgents.doDetach(agent.jenkinsName, CTLR_NAME, false)
                                        }
                                    }
                                } else {
                                    error "Failed to transfer job to new agent, aborting cleanup"
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        failure {
            script {
                emailext(
                    subject: "Jenkins Agent Cleanup Failed - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                    body: "The Jenkins agent cleanup job failed. Please check the logs.",
                    to: STATIC_NOTIFICATION_LIST
                )
            }
        }
    }
}

// Helper functions
def transferJob(newAgentName, currentNodeName) {
    return sh(
        script: """
            jenkins-cli -s http://${newAgentName}:8080 build ${env.JOB_NAME} -p TRANSFER_FROM=${currentNodeName} || exit 1
            sleep 30  # Wait for job to start on new agent
            if curl -s http://${newAgentName}:8080/job/${env.JOB_NAME}/lastBuild/api/json | grep '"building":true'; then
                exit 0
            else
                exit 1
            fi
        """,
        returnStatus: true
    ) == 0
}

def removeOldAgents(agentsList, keepCount) {
    def agentsToRemove = agentsList[keepCount..-1]
    agentsToRemove.each { agent ->
        jenkinsAgents.doDetach(agent.jenkinsName, CTLR_NAME, false)
    }
}