@Library('jenkins-sharedlib') _
import com.cloudbees.jenkins.plugins.awscredentials.*
import com.cloudbees.plugins.credentials.*
import jenkins.model.Jenkins

// Required initialization variables
STATIC_NOTIFICATION_LIST = "ladsdc@ice.dhs.gov"
VAULT_MANAGED_APP_ROLE = 'managed_vault_approle'
CB_SECRET_PATH = 'secret/managed/cloudbees/shared'
CTLR_NAME = 'aws'

// Active Jenkins Agent Class Definition
class ActiveJenkinsAgent implements Serializable {
    def script
    String awsInstanceId
    String wsName
    String jenkinsName
    String ctlrName
    Date awsCreatedOnDate

    ActiveJenkinsAgent(script, awsInstanceId, wsName, jenkinsName, ctlrName) {
        this.script = script
        this.awsInstanceId = awsInstanceId
        this.wsName = wsName
        this.jenkinsName = jenkinsName
        this.ctlrName = ctlrName
        
        def launchTime = script.sh(
            returnStdout: true,
            script: "aws ec2 describe-instances --instance-ids ${awsInstanceId} --query 'Reservations[].Instances[].LaunchTime' --output text"
        ).trim()
        this.awsCreatedOnDate = Date.parse("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", launchTime)
    }
}

pipeline {
    agent {
        node {
            label 'sdo-jenkins'
        }
    }

    environment {
        CTLR_NAME = 'aws'
        DEBUG = true
        IS_MAIN = env.BRANCH_NAME == 'main' || env.BRANCH_NAME == 'master'
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    // Load required utilities
                    cloudBeesUtils = load 'cloudBeesUtils.groovy'
                    jenkinsAgents = load 'jenkinsAgents.groovy'
                }
            }
        }

        stage('Detach Nodes') {
            when {
                expression { IS_MAIN }
            }
            steps {
                script {
                    // Get current node information
                    def currentNodeName = env.NODE_NAME
                    def currentNodeId = sh(
                        returnStdout: true,
                        script: "aws ec2 describe-instances --filters 'Name=tag:Name,Values=${currentNodeName}' --query 'Reservations[*].Instances[*].[InstanceId]' --output text"
                    ).trim()
                    
                    echo "Current node: ${currentNodeName} (${currentNodeId})"
                    
                    // Get agents list from parameter or another job
                    def agentsToDetach = params.AGENTS_TO_DETACH.split(',')
                    def currentAgentInfo = null
                    def newestAgent = null
                    
                    CCloudbeeUtils.vaultCredBindingWrapper(CTLR_NAME, { cbId, cbToken ->
                        // Get newest agent for transfer
                        def newestAgentResponse = sh(
                            returnStdout: true,
                            script: """
                                curl -s -H '${cbId}:${cbToken}' 'https://cloudbees.ice.dhs.gov/ems/computer/api/json?tree=computer[displayName,description,assignedLabels[name],launchTime]&pretty=0' | \
                                jq -r '.computer[] | select(.assignedLabels[].name == "sdo-jenkins") | "\(.displayName),\(.description),\(.launchTime)"' | \
                                sort -t',' -k3 -r | head -n 1
                            """
                        ).trim()
                        
                        newestAgent = newestAgentResponse.split(',')[0]
                        
                        // Process detachment
                        agentsToDetach.each { agentName ->
                            if (agentName == currentNodeName) {
                                currentAgentInfo = agentName
                                return // skip current agent
                            }
                            
                            // Detach other agents
                            echo "Detaching agent: ${agentName}"
                            jenkinsAgents.doDetach(agentName, CTLR_NAME, false)
                        }
                        
                        // Handle current agent last if it's in the list
                        if (currentAgentInfo) {
                            echo "Handling current agent detachment..."
                            
                            echo "Attempting to transfer job to newest agent: ${newestAgent}"
                            def success = sh(
                                script: """
                                    jenkins-cli -s http://${newestAgent}:8080 build ${env.JOB_NAME} -p TRANSFER_FROM=${currentNodeName} || exit 1
                                    sleep 30  # Wait for job to start on new agent
                                    if curl -s http://${newestAgent}:8080/job/${env.JOB_NAME}/lastBuild/api/json | grep '"building":true'; then
                                        exit 0
                                    else
                                        exit 1
                                    fi
                                """,
                                returnStatus: true
                            ) == 0
                            
                            if (success) {
                                echo "Job successfully transferred, current agent will be detached by new instance"
                            } else {
                                error "Failed to transfer job to new agent, aborting cleanup"
                            }
                        }
                    })
                }
            }
        }
    }

    post {
        failure {
            script {
                emailext(
                    subject: "Jenkins Agent Detach Failed - ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                    body: "The Jenkins agent detach job failed. Please check the logs.",
                    to: STATIC_NOTIFICATION_LIST
                )
            }
        }
    }
}